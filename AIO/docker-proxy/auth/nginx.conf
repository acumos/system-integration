## ===============LICENSE_START=======================================================
## Acumos Apache-2.0
## ===================================================================================
## Copyright (C) 2018-2019 AT&T Intellectual Property. All rights reserved.
## ===================================================================================
## This Acumos software file is distributed by AT&T
## under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## This file is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## ===============LICENSE_END=========================================================
##
## What this is: NGINX configuration for the Acumos docker-proxy
##

events {
    worker_connections  1024;
}

http {
  include       mime.types;
  default_type  application/octet-stream;

  log_format main '$remote_addr - $remote_user [$time_local] '
                  'request="$request" Authorization="$http_authorization" '
                  'status=$status bytesSent=$body_bytes_sent '
                  'referer="$http_referer" userAgent="$http_user_agent" ';

  access_log /var/log/acumos/access.log main;

  upstream docker-registry {
    server <ACUMOS_DOCKER_REGISTRY_HOST>:<ACUMOS_DOCKER_MODEL_PORT>;
  }

  ## Set a variable to help us decide if we need to add the
  ## 'Docker-Distribution-Api-Version' header.
  ## The registry always sets this header.
  ## In the case of nginx performing auth, the header is unset
  ## since nginx is auth-ing before proxying.
  map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
    '' 'registry/2.0';
  }

  server {
    listen 8443 ssl;
    server_name <ACUMOS_DOCKER_PROXY_HOST>;
    access_log on;
    access_log /var/log/acumos/docker-proxy-access.log main;
    error_log /var/log/acumos/docker-proxy-error.log warn;

    # SSL
    ssl_certificate /etc/nginx/conf.d/domain.crt;
    ssl_certificate_key /etc/nginx/conf.d/domain.key;

    # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;

    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;

    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
    chunked_transfer_encoding on;

    set $auth $http_authorization;

    location /authok/ {
      # Do not allow connections from docker 1.5 and earlier
      # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
      if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
        return 404;
      }

      ## If $docker_distribution_api_version is empty, the header is not added.
      ## See the map directive above where this variable is defined.
      add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

      rewrite /authok/(.*) /$1 break;
      proxy_pass                          http://docker-registry;
      proxy_set_header  Authorization "Basic <ACUMOS_DOCKER_PROXY_AUTH>";
      proxy_set_header  Host              $http_host;   # required for docker client's sake
      proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_read_timeout                  900;
    }

    location /v2/ {
      rewrite /v2/(.*) /auth/v2/$1 break;
      proxy_pass http://127.0.0.1:8000;
      proxy_pass_request_headers on;
      proxy_pass_request_body on;
      proxy_set_header X-Original-URI $request_uri;
      proxy_set_header Authorization $http_authorization;
    }
  }
}
